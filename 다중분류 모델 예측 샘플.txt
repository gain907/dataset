# 모델 만들기
model = Sequential()
model.add(Dense(12,input_dim=4, activation='relu')) # 입력/히든레이어 input + hidden layer
model.add(Dense(24, activation='relu')) # 히든레이어 hidden layer
model.add(Dense(48, activation='relu')) # 히든레이어 hidden layer
model.add(Dense(96, activation='relu')) # 히든레이어 hidden layer
model.add(Dense(3, activation='softmax')) # 출력레이어 output layer



# model.comile
# loss, optimizer, metrics
model.compile(loss = 'categorical_crossentropy',
              optimizer = 'adam',
              metrics=['accuracy']
              )
# 모델 학습
model.fit(x,y_encoder,epochs=50, batch_size=16)
poch 1/50
10/10 [==============================] - 8s 5ms/step - loss: 1.0949 - accuracy: 0.4333
Epoch 2/50
10/10 [==============================] - 0s 4ms/step - loss: 0.9699 - accuracy: 0.5200
Epoch 3/50
10/10 [==============================] - 0s 4ms/step - loss: 0.8795 - accuracy: 0.6667
Epoch 4/50
10/10 [==============================] - 0s 4ms/step - loss: 0.7705 - accuracy: 0.6667
Epoch 5/50
10/10 [==============================] - 0s 4ms/step - loss: 0.6552 - accuracy: 0.7067
Epoch 6/50
10/10 [==============================] - 0s 4ms/step - loss: 0.5634 - accuracy: 0.9067
Epoch 7/50
10/10 [==============================] - 0s 4ms/step - loss: 0.4942 - accuracy: 0.8267
Epoch 8/50
10/10 [==============================] - 0s 4ms/step - loss: 0.4468 - accuracy: 0.8600
Epoch 9/50
10/10 [==============================] - 0s 4ms/step - loss: 0.4055 - accuracy: 0.8733
Epoch 10/50
10/10 [==============================] - 0s 4ms/step - loss: 0.3664 - accuracy: 0.9467
Epoch 11/50
10/10 [==============================] - 0s 4ms/step - loss: 0.3504 - accuracy: 0.8800
Epoch 12/50
10/10 [==============================] - 0s 4ms/step - loss: 0.3055 - accuracy: 0.9533
Epoch 13/50
10/10 [==============================] - 0s 4ms/step - loss: 0.2822 - accuracy: 0.9400
Epoch 14/50
10/10 [==============================] - 0s 4ms/step - loss: 0.2607 - accuracy: 0.9267
Epoch 15/50
10/10 [==============================] - 0s 4ms/step - loss: 0.2292 - accuracy: 0.9200
Epoch 16/50
10/10 [==============================] - 0s 4ms/step - loss: 0.2014 - accuracy: 0.9467
Epoch 17/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1989 - accuracy: 0.9400
Epoch 18/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1898 - accuracy: 0.9467
Epoch 19/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1559 - accuracy: 0.9667
Epoch 20/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1437 - accuracy: 0.9667
Epoch 21/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1386 - accuracy: 0.9800
Epoch 22/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1552 - accuracy: 0.9533
Epoch 23/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1278 - accuracy: 0.9667
Epoch 24/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1503 - accuracy: 0.9333
Epoch 25/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1331 - accuracy: 0.9533
Epoch 26/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1366 - accuracy: 0.9533
Epoch 27/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1055 - accuracy: 0.9733
Epoch 28/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0985 - accuracy: 0.9800
Epoch 29/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1483 - accuracy: 0.9267
Epoch 30/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1119 - accuracy: 0.9667
Epoch 31/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0981 - accuracy: 0.9667
Epoch 32/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0878 - accuracy: 0.9733
Epoch 33/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1217 - accuracy: 0.9800
Epoch 34/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1025 - accuracy: 0.9533
Epoch 35/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0955 - accuracy: 0.9600
Epoch 36/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0947 - accuracy: 0.9800
Epoch 37/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0993 - accuracy: 0.9667
Epoch 38/50
10/10 [==============================] - 0s 5ms/step - loss: 0.0903 - accuracy: 0.9533
Epoch 39/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0825 - accuracy: 0.9733
Epoch 40/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0829 - accuracy: 0.9667
Epoch 41/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0791 - accuracy: 0.9800
Epoch 42/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0778 - accuracy: 0.9733
Epoch 43/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0975 - accuracy: 0.9667
Epoch 44/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0941 - accuracy: 0.9467
Epoch 45/50
10/10 [==============================] - 0s 5ms/step - loss: 0.0867 - accuracy: 0.9667
Epoch 46/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1302 - accuracy: 0.9467
Epoch 47/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1317 - accuracy: 0.9600
Epoch 48/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0926 - accuracy: 0.9533
Epoch 49/50
10/10 [==============================] - 0s 4ms/step - loss: 0.0909 - accuracy: 0.9667
Epoch 50/50
10/10 [==============================] - 0s 4ms/step - loss: 0.1488 - accuracy: 0.9333
<keras.src.callbacks.History at 0x7f94530d07f0>

# 모델 검증(evaluate)
eva = model.evaluate(x,y_encoder)[1]
eva1 = np.round(eva*100,2)
print(eva1)
eva2 = format(eva*100,'.2f')
print(eva2)

# 예측
target_name = ['a','b','c']
# 입력 데이터 전처리
input_data = [[5.1,3.3,1.4,0.4]]  # 특징수 입력
predict = model.predict(np.array(input_data))
print('결과',predict)
result = np.argmax(predict)
print('result')
target_name[result]

# 결과
1/1 [==============================] - 0s 17ms/step
결과 [[9.9987066e-01 1.2936078e-04 1.9171787e-11]]
result
a








